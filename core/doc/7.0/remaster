#!/usr/bin/perl
# -*- Perl -*-
#
# Repackage the alp/master cvs tree
#

# <copyright>
#  Copyright 2001 BBNT Solutions, LLC
#  under sponsorship of the Defense Advanced Research Projects Agency (DARPA).
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the Cougaar Open Source License as published by
#  DARPA on the Cougaar Open Source Website (www.cougaar.org).
# 
#  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
#  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
#  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
#  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
#  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
#  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
#  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#  PERFORMANCE OF THE COUGAAR SOFTWARE.
# </copyright>


$starttime=time;

$verbose=2;			# 0=quiet, 1=normal, 2=every command
$pretend=0;			# 0=do it, 1=pretend

#$oldcvs=':ext:mthome@eiger.alpine.bbn.com:/cvs/alp/master6';
$oldcvs=':ext:mthome@eiger.alpine.bbn.com:/cvs/alp/master';
$oldtag="ALP_6_8";
$newcvs=':ext:mthome@eiger.alpine.bbn.com:/cvs/alp/master';
$libdir="/home/mthome/rpg";

$tmpdir="/tmp/alp";
$olddir="$tmpdir/old";
$oldmoby="$tmpdir/oldmoby";	# old unified source
$newmoby="$tmpdir/newmoby";      # new unified source


# skip whatif, fgi
@mods = (alpine, build, core, javaiopatch, server, tools, tutorial, utility);

l("Setting up /tmp/alp");
x("rm -rf $tmpdir");
x("mkdir -p $olddir");

l("Checking out old");
chdir($olddir);
x("cvs -d $oldcvs export -r $oldtag .");

x("rm -rf CVSROOT fgi whatif");

l("Building moby src tree: $oldmoby");

x("mkdir -p $oldmoby");
foreach $mod (@mods) {
  x("cp -Rp $mod/src $oldmoby");
}

# a few fixups

# we'll want to put these back in the correct places after we 
# remodularize
$srcdir="$oldmoby/src";
x("rm $srcdir/PLUGIN $srcdir/ChangeLog $srcdir/manifest.mf");

# repackage the moby src tree
x("mkdir -p $newmoby");
chdir($oldmoby);
x("$libdir/repackage -mv -d $newmoby src $libdir/alp7.pkg");

# make sure everything got copied...  numbers should be the same
$cold = 0+ev("find $oldmoby/src -type f -print | wc -l");
$cnew = 0+ev("find $newmoby -type f -print | wc -l");

if ($cold == $cnew) {
  l("Moved all $cold files");
} else {
  l("Moved $cold of $cnew files");
}

##
## now remodularize...
##

$dest="$tmpdir/dest";
x("mkdir -p $dest");

# javaiopatch
copytree("javaiopatch/src", "java/io");
copyone("javaiopatch/src/ChangeLog", "javaiopatch/src/ChangeLog");

# build
copyold("build");
copytree("build/src","org/cougaar/tools/build");
copyone("build/src/ChangeLog", "build/src/ChangeLog");

# util
# add to moby core for now
#copytree("util/src","org/cougaar/util");

# configgen
#copyold("configgen");
#copytree("configgen/src", "org/cougaar/tools/configgen");
# already correctly placed - we'll import into 7.0 before the release

# tutorial
copyold("tutorial");
copytree("tutorial/src", "org/cougaar/tutorial");

# contract
copytree("contract/src", "org/cougaar/lib/contract");

# toolkit
copytree("toolkit/src", "org/cougaar/lib/plugin");
copytree("toolkit/src", "org/cougaar/lib/xml");
copytree("toolkit/src", "org/cougaar/lib/util");
copytree("toolkit/src", "org/cougaar/lib/filter");
copytree("toolkit/src", "org/cougaar/lib/param");
copytree("toolkit/src", "org/cougaar/lib/callback");

# scalability
copytree("scalability/src", "org/cougaar/tools/scalability");
copytree("scalability/src", "org/cougaar/tools/performance");

# alpserver
copyold("server");
copytree("server/src", "org/cougaar/tools/server");
copyone("server/src/manifest.mf", "server/src/manifest.mf");
copyone("server/src/ChangeLog", "server/src/ChangeLog");

# planserver
copytree("planserver/src", "org/cougaar/lib/planserver");

# core (moby module)
copyold("core");
copytree("core/src", "org/cougaar/core");
copytree("core/src", "org/cougaar/domain/planning");
copytree("core/src","org/cougaar/util"); # sigh
copyone("core/src/ChangeLog", "core/src/ChangeLog");
copyone("core/src/alp/version.def", "core/src/org/cougaar/version.def");
# these probably belong elsewhere
$cx = "$dest/core/examples";
x("mkdir -p $cx")
x("mv $dest/core/src/AlertCreatorPlugIn.java $cx");
x("mv $dest/core/src/AssetCreationJdbcPlugIn.java $cx");
x("mv $dest/core/src/ReportCreatorPlugIn.java $cx");
x("mv $dest/core/src/SimpleSinkAllocatorPlugIn.java $cx");
x("mv $dest/core/src/index.html $cx");

# glm (from alpine)
# glm is full of mlm refs.  We'll start with them merged
# mlm (was alpine)
copyold("alpine");
x("mv $dest/alpine $dest/mlm");
copytree("mlm/src", "org/cougaar/domain/mlm");
copytree("mlm/src", "org/cougaar/domain/glm");
copytree("mlm/src", "org/cougaar/lib/gss");
copyone("alpine/src/PLUGIN", "mlm/src/PLUGIN");
copyone("alpine/src/ChangeLog", "mlm/src/ChangeLog");


@newmods=(javaiopatch, 
#	  build,     #handled later
	  util,
	  configgen,
#	  tutorial,
	  contract,
	  toolkit,
	  scalability,
	  server,
	  planserver,
	  core,
	  mlm,
# merged into glm module for now.
#	  glm,
	  );

# do in-place conversions of copied stuff
foreach $mod (@newmods) {
  c("$mod/bin");
#  c("$mod/doc");
  c("$mod/configs");
  c("data");
}

c("build");

c("core/src/org/cougaar/version.def");

# required hand-fixups:
# properties.def files which ref planning's properties might need to be updated.

$endtime=time;
$min = ($endtime-$starttime)/60;
l("done in $min minutes!");
exit(0);

#
# supporting routines
#

sub x {
  local($command)= @_;

  l("$command") if ($verbose>1);
  if ($pretend) {
    return 0;
  }

  if ($pid = fork ) {
    # parent
    waitpid $pid, 0;
    local($rc)= $?;
    # signal decoding from Perl5 manual
    $rc &= 0xffff;
    if ($rc != 0) {
      $sawerror++;
      if ($rc == 0xff00) {
	print STDERR "Command failed: $!\n";
      } elsif ($rc > 0x80) {
	$rc >>= 8;
	print STDERR "Completed with exit status of $rc\n";
      } else {
	print STDERR "Ran with ";
	if ($rc &  0x80) {
	  $rc &= 0x80;
	  print STDERR "coredump from ";
	}
	print STDERR "signal $rc\n";
      }
    }
    return $rc;
  } elsif (defined $pid) {
    # child
    exec $command;
    print STDERR "$command: $!\n";
    exit(-1);
  } else {
    die "Couldn't run @_\n";
  }
}

sub l {
  print STDERR "@_\n" if ($verbose);
}

sub ev {
  local($command)=@_;
  open CMD, "$command|" || die("Couldn't execute $command");
  $_=<CMD>;
  close CMD;
  chop;
  $_;
}

sub copytree {
  local($d, $s) = @_;
  x("mkdir -p $dest/$d/$s");
  x("cp -Rp $newmoby/$s/* $dest/$d/$s");
}

sub copyold {
  local($m) = @_;
  x("mkdir -p $dest/$m");
  x("cd $olddir/$m; tar cf - . | (cd $dest/$m ; tar xvf - )");
  x("cp -Rp $olddir/$m/* $dest/$m");
  x("rm -rf $dest/$m/src");
}

sub copyone {
  local($o, $n) = @_;
  x("cp -Rp $olddir/$o $dest/$n");
}

sub c {
  local($p)=@_;
  if (-d "$dest/$p") {
    x("$libdir/repackage -v $dest/$p $libdir/alp7.pkg");
  }
}
