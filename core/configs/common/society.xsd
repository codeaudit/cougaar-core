<?xml version="1.0"?>

<!--
* <copyright>
*  
*  Copyright 2000-2004 BBNT Solutions, LLC
*  under sponsorship of the Defense Advanced Research Projects
*  Agency (DARPA).
* 
*  You can redistribute this software and/or modify it under the
*  terms of the Cougaar Open Source License as published on the
*  Cougaar Open Source Website (www.cougaar.org).
* 
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
*  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*  
* </copyright>
-->


<!-- XML Schema for documents that describe Cougaar societies -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!-- Top level element -->
  <xs:element name="society" type="societyType">
    <!-- Not sure hosts have to be unique. 
         Could be OK to have a host's nodes separated in here
    <xs:unique name="hosts">
      <xs:selector xpath="host"/>
      <xs:field xpath="@name"/>
    </xs:unique> 
    -->
    <!-- Ensure that there are not two nodes with the same name in the society-->
    <xs:unique name="nodes">
      <xs:selector xpath="host/node"/>
      <xs:field xpath="@name"/>
    </xs:unique>
    <!-- Ensure that there are not two agents with the same name in the society-->
    <xs:unique name="agents">
      <xs:selector xpath="host/node/agent"/>
      <xs:field xpath="@name"/>
    </xs:unique>
  </xs:element>

  <!-- Type for top level society element -->
  <!-- (A sequence of hosts)              -->
  <xs:complexType name="societyType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="facet" type="facetType"/>
        <xs:element name="host" type="hostType" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>

  <!-- Type for hosts                     -->
  <!-- (A sequence of nodes)              -->
  <xs:complexType name="hostType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="facet" type="facetType"/>
        <xs:element name="node" type="nodeType" minOccurs="0" maxOccurs="unbounded">
          <!-- Ensure that there are not two components with the same name in the node agent -->
          <xs:unique name="nodecomponents">
            <xs:selector xpath="component"/>
            <xs:field xpath="@name"/>
          </xs:unique>
        </xs:element>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>

  <!-- Type for nodes                     -->
  <!-- (several possible attributes)      -->
  <xs:complexType name="nodeType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="facet" type="facetType"/>
        <xs:element name="prog_parameter" type="xs:string"/>
        <xs:element name="env_parameter" type="xs:string"/>
        <xs:element name="class" type="xs:string"/>
        <xs:element name="vm_parameter" type="xs:string"/>
        <xs:element name="agent" type="agentType">
          <!-- Ensure that there are not two components with the same name in this agent -->
          <xs:unique name="components">
            <xs:selector xpath="component"/>
            <xs:field xpath="@name"/>
          </xs:unique>
        </xs:element>
        <xs:element name="component" type="componentType"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>

  <!-- Arbitrary attributes that can be added to an agent, node, or host    -->
  <!-- They can have any attributes and contain text (but not sub-elements) -->
  <xs:complexType name="facetType" mixed="true">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:anyAttribute processContents="lax"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
    
  <!-- Type for agents: a sequence of components and attributes -->
  <xs:complexType name="agentType">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="component" type="componentType"/>
        <xs:element name="facet" type="facetType"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="class" type="xs:string" use="optional"
      default="org.cougaar.core.agent.SimpleAgent"/>
  </xs:complexType>

  <!-- Type for components: attributes and arguments -->
  <xs:complexType name="componentType">
    <xs:sequence>
      <xs:element name="argument" type="argumentType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string"/>
    <xs:attribute name="class" type="xs:string"/>
    <xs:attribute name="priority" use="optional" default="COMPONENT">
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="HIGH"/>
          <xs:enumeration value="INTERNAL"/>
          <xs:enumeration value="BINDER"/>
          <xs:enumeration value="COMPONENT"/>
          <xs:enumeration value="LOW"/>
          <xs:enumeration value="STANDARD"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="insertionpoint" use="optional"
      default="Node.AgentManager.Agent.PluginManager.Plugin"
      type="xs:string"/>
  </xs:complexType>

  <!-- Type for component arguments: ordered strings -->
  <xs:complexType name="argumentType">
    <xs:simpleContent>
      <xs:extension base="xs:string"/>
    </xs:simpleContent>
  </xs:complexType>

</xs:schema>

