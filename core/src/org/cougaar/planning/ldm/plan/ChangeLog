2001-11-26  Ray Tomlinson  <RTomlinson@bbn.com>

	* AssetVerificationImpl.java:
	Include the schedule in the toString value to aid in debugging.

	* AssignedRelationshipElementImpl.java:
	Add toString method to reveal detail of the element to aid in
	debugging.

2001-08-30  Ray Tomlinson  <RTomlinson@bbn.com>

	* AllocationResult.java:
	Fix bug in constructor for merging two allocation results (e.g.
	received + observed). The old code left nulls in the rollup result
	array leading to NPE later.

2001-07-16  Ray Tomlinson  <RTomlinson@bbn.com>

	* AggregationImpl.java
	Bug #410
	publishChange the task of an Aggregation that is removed as a side
	effect of propagating the removal of another Aggregation. This
	allows the task to be re-disposed.


2001-07-16  Jim Winston  <jwinston@bbn.com>
        * ScoringFunction.java:
	Bug #406
	Added public AspectValue getPoint() to SinglePointScoringFunction
	Added public AspectValue getPoint1() and 
	public AspectValue getPoint2() to TwoPointScoringFunction

2001-07-16  Jim Winston  <jwinston@bbn.com>
	* NewScheduleElement.java, ScheduleElementImpl.java:
	Bug #335
	Added setStartEndTimes(long starttime, long endtime).
	Changed default starttime to TimeSpan.MIN_VALUE and
	endtime to TimeSpan.MAX_VALUE
	
2001-05-01  Ray Tomlinson  <RTomlinson@bbn.com>

	* AllocationResult.java:
	Add nearlyEquals method to use AspectValues.nearlyEquals . See
	comments on the latter regarding problematic equality comparison
	of doubles.

	* AspectValue.java:
	Add nearlyEquals method using MoreMath.nearlyEquals to compare
	AspectValues. See comments on the latter regarding problematic
	equality comparison of doubles.

2001-04-30  Ray Tomlinson  <RTomlinson@bbn.com>

	* AllocationResult.java:
	Bug #372
	Use AspectValue.compare(AspectValue[], AspectValue[]) to compare
	the aspect values of the result. Such arrays are really sets and
	should be compared in an order-independent way.

	* AspectValue.java:
	Bug #372
	Add method to compare two AspectValue[] that ignores differences
	in the order of the values. Used by AllocationResult.isEqual to
	correctly compute the equality of two AllocationResults.

2001-04-12  Ray Tomlinson  <RTomlinson@bbn.com>

	* ExpansionImpl.java:
	Debugging support
	Change toString to show the UID of the plan element.

2001-04-06  Ray Tomlinson  <RTomlinson@bbn.com>

	* AspectValue.java:
	Applies to Bug #196
	Add method for cloning arrays of AspectValue. Used in several
	places in pending changes in glm to avoid aliasing bugs.

2001-04-04  Ray Tomlinson  <RTomlinson@bbn.com>

	* AllocationResult.java:
	Applies to Bug #248
	Remove debugging code. This should cause the
	IllegalArgumentException caused by an incorrect AspectValue for
	the DEMANDRATE aspect to cease.

2001-04-03  Ray Tomlinson  <RTomlinson@bbn.com>

	* TimeAspectValue.java:
	Applies Bug #196
	Fix toString() to assist in debugging phased allocation results.

	* ScheduleImpl.java:
	Applies to whatever the bug is about debugging output
	Remove debugging println. Lines saying "ListIterator" should
	cease.

	* AssetAspectValue.java:
	Applies to Bug #196
	Add missing clone method used when constructing new phase4d
	allocation results.

	* AspectRate.java:
	Applies to Bug #196
	Add missing clone method used when constructing new phased
	allocation results. Fix setValue method to actually set a new Rate
	value for an existing AspectValue. Needed to support changing
	phased allocation results.

	* AspectLocation.java:
	Applies to Bug #196
	Add missing clone method used when constructing new phased
	allocation results.

	* AllocationResult.java:
	Applies to Bug #196
	Correct bugs in handling of phased results. Redundant data
	structures removed since they were not correctly tracking each
	other and were of dubious benefit. Added toString() to assist
	debugging. Add clone().

1999-03-01  Beth DePass <bdepass@bbn.com>
  * ExtendedPenaltyImpl, PenaltyValueImpl, SinglePenaltyImpl, ClusterObjectFactoryImpl
  Support for ExtendedPenalty which can be defined on PenaltyValue.
  As Designed (for now) String and double.
  
1999-03-01  Beth DePass <bdepass@bbn.com>
  * WorkflowImpl
  Support for customizable PenaltyValueAggregators to be used in computing
  the penaltyvalues across subtasks of a workflow.  Additional factory like
  support for the penaltyvalueaggregators.  Implemenation of TaskPenaltyTable.

1999-02-10  Beth DePass <bdepass@bbn.com>
  * RoleScheduleImpl
  Deprecate and add methods to conform to new PenaltyValue arrays.
  
1999-02-10  Beth DePass <bdepass@bbn.com>
  * WorkflowImpl
  Rework the compute penalty method to use the new PenaltyValue arrays.
  
1999-02-10  Beth DePass <bdepass@bbn.com>
  * PenaltyValueImpl
  Rework complete - penalty value is now a wrapper for penaltymeasure/value
  pairs stored in an array. Code needs to be added for extensions. Inner
  class enumerator included.
  
1999-02-05  Beth DePass <bdepass@bbn.com>
  * PenaltyValueImpl
  Start on rework to move to measure/value array. 

1999-02-03  Beth DePass <bdepass@bbn.com>
  * PlanElementImpl
  Update doRoleSchedule method to conform to new RoleSchedule object
  
1999-02-03  Beth DePass <bdepass@bbn.com>
  * RoleScheduleImpl
  New... make RoleSchedule a first class object, instead of a container
  inside of asset.
  



	
	

	
	