/* 
 * <copyright>
 *  
 *  Copyright 2002-2004 BBNT Solutions, LLC
 *  under sponsorship of the Defense Advanced Research Projects
 *  Agency (DARPA).
 * 
 *  You can redistribute this software and/or modify it under the
 *  terms of the Cougaar Open Source License as published on the
 *  Cougaar Open Source Website (www.cougaar.org).
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 * </copyright>
 */

package org.cougaar.core.mobility.ldm;

import org.cougaar.core.mobility.AbstractTicket;
import org.cougaar.core.mobility.Ticket;
import org.cougaar.core.mts.MessageAddress;
import org.cougaar.core.service.UIDService;
import org.cougaar.core.util.UID;

/**
 * Package-private {@link MobilityFactory} implementation.
 */
class MobilityFactoryImpl implements MobilityFactory {

  private UIDService uidService;
  private MessageAddress agentId;

  public MobilityFactoryImpl(
      UIDService uidService,
      MessageAddress nodeId,
      MessageAddress agentId) {
    this.uidService = uidService;
    this.agentId = agentId;
  }

  public Object createTicketIdentifier() {
    UID uid = uidService.nextUID();
    return new TicketIdentifier(uid);
  }

  public MoveAgent createMoveAgent(Ticket ticket) {
    Object tid = ticket.getIdentifier();
    if (!(tid instanceof TicketIdentifier)) {
      throw new IllegalArgumentException(
          "The ticket must have a \"getIdentifier()\""+
          " that was generated by this MobilityFactory's"+
          " \"createTicketIdentifier()\"");
    }
    MessageAddress source = agentId;
    MessageAddress target = ticket.getMobileAgent();
    if (target == null) {
      target = agentId;
    }
    UID uid = ((TicketIdentifier) tid).getUID();
    return
      new MoveAgentAdapter(
          uid, source, target, ticket);
  }

  public AgentControl createAgentControl(
      UID ownerUID,
      MessageAddress target,
      AbstractTicket ticket) {
    UID uid = uidService.nextUID();
    return new AgentControlImpl(
        uid, ownerUID, agentId, target, ticket);
  }
}
