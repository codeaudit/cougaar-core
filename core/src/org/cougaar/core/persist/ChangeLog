2003-04-24  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistenceServiceComponent.java: 
	Bug #2838 -- Persistence lacks per-agent configurability
	Separate node-wide and per-agent variables so the former specify
	default configuration and the later specify per-agent configure.
	Add per-agent defaults for per-media parameters. Move all
	per-media parameterization to the media plugins.
	Revise setParameter to expect multiple parameters the first of
	which is the agent id and the remainder are per-agent
	configuration parameters. In addition, add a system property to
	specify these parameters to work-around a shortcoming of agent
	parameterization in CSMART and ACME.

	* Exercise.java: 
	Bug #2838 -- Persistence lacks per-agent configurability
	Revise to test these changes.

	* PersistenceServiceForBlackboard.java:
	Bug #2838 -- Persistence lacks per-agent configurability
	Remove disableWrite method. This function is now controlled
	directly with parameters of the PersistenceServiceComponent.

	* PersistenceNames.java: 
	Bug #2838 -- Persistence lacks per-agent configurability
	Move all parameter names to this interface to facilitate
	uniformity of names for properties, parameters, and parsing
	constants.

	* PersistencePluginAdapter.java: 
	* PersistencePlugin.java: 
	Bug #2838 -- Persistence lacks per-agent configurability
	Move all per-plugin parameter handling from
	PersistenceServiceComponent to the plugin itself. Part of
	making parameter handling uniform. Also make the writability of
	persistence a per-media parameter rather than node-wide. This
	makes it possible to rehydrate from one medium, but not use that
	medium for subsequent persistence.

	* FilePersistenceBase.java: 
	* DummyPersistence.java: 
	* DatabasePersistence.java: 
	Bug #2838 -- Persistence lacks per-agent configurability
	Regularize parameter handling to facility multiple sources of
	parameterization. Parameter names moved to a separate interface to
	insure uniformity.

	* Persistence.java: 
	* BlackboardPersistence.java:
	Bug #2838 -- Persistence lacks per-agent configurability
	Remove disableWrite method. This function is now controlled
	directly with parameters of the PersistenceServiceComponent.

	* BasePersistence.java:
	Fix deprecation warnings resulting from use of old StringUtility
	methods. Use CSVUtility instead.

2003-04-07  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistenceServiceComponent.java: 
	* BasePersistence.java:
	Bug #2743 -- Dots and other characters printed to System.err/out
	interfere with logging
	Use logger.printDot instead of System.out.print.

2003-03-21  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistenceServiceComponent.java: 
	* BasePersistence.java:
	Bug #2694 -- Removed PlanElements are re-inserted into role schedules by postHydration
	Do not call postHydration for inactive objects.

2003-03-14  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java
	* BasePersistence.java:
	* FilePersistenceBase.java
	* IdentityTable.java
	* PersistenceInputStream.java
	* PersistenceOutputStream.java
	* PersistenceServiceComponent.java
	Use new DETAIL logging level for the lowest level details such as
	information about every object being written to a persistence
	snapshot.

	* PersistenceMetricsServlet.java:
	Add "Persist Now" button to initiate persistence and facilitate
	persistence debugging.

2003-03-13  Ray Tomlinson  <RTomlinson@bbn.com>

	* TestFullSnapshot.java:
	Test plugin creates full snapshots after publishAdding a lot of
	objects and then again after publishRemoving those objects. Used
	to test that the removed objects are not included in the the full
	persistence snapshot.

	* Persistable.java:
	Interface for potentially persistable objects. The isPersistable()
	method from the Publishable interface has been moved here and
	Publishable now extends this interface. It was illogical that the
	Publishable interface declared the isPersistable method.

	* PersistenceObject.java:
	Fix comment to accurately describe what this class is for.

	* PersistenceOutputStream.java: 
	* PersistenceInputStream.java: 
	* PersistenceAssociation.java:
	Bug #1848 -- Need persistence of component hierarchy for mobile agents
	Add PersistenceIdentity field to keep track of which client owns
	the object.

	* PersistencePluginAdapter.java: 
	* FilePersistenceBase.java: 
	* PersistencePlugin.java: 
	Bug #2572 -- Persistence snapshots grow without bound
	Add cleanupArchives method.

	* DatabasePersistence.java: 
	Use Logger instead of LoggingService.
	Generalize so that MySQL can be used as well as Oracle.

	* BufferedFileSystem.java: 
	* BufferedFilePersistence.java:
	Use Logger instead of LoggingService.

	* DummyPersistence.java: 
	Bug #2572 -- Persistence snapshots grow without bound
	Add cleanupArchive method

	* BasePersistence.java:
	Bug #2572 -- Persistence snapshots grow without bound
	Add org.cougaar.core.persistence.archiveCount property specifying
	how many archive snapshots to keep. Defaults to Integer.MAX_VALUE.

	* PersistenceIdentity.java: 
	Bug #1848 -- Need persistence of component hierarchy for mobile agents
	Used to identify persistence clients to match up rehydration data
	with the proper client. Must be invariant between restarts.

	* PersistenceClient.java: 
	Bug #1848 -- Need persistence of component hierarchy for mobile agents
	Defines the interface that clients of the PersistenceService must
	implement.

	* RehydrationData.java: 
	Bug #1848 -- Need persistence of component hierarchy for mobile agents
	Define the rehydration data returned from persistence service.

	* PersistenceServiceForBlackboard.java: 
	Bug #1848 -- Need persistence of component hierarchy for mobile agents
	Blackboard-specific interface to persistence. Used to retain the
	mirrored persistence services to plugins and other blackboard
	clients.

	* PersistenceServiceForAgent.java: 
	Bug #1848 -- Need persistence of component hierarchy for mobile agents
	Agent-specific interface to persistence. Used to initiate rehydration.

	* PersistenceServiceComponent.java: 
	Bug #1848 -- Need persistence of component hierarchy for mobile agents
	Factor persistence into blackboard-specific and generic parts.
	This is the generic part.

	* PersistenceService.java: 
	Bug #1848 -- Need persistence of component hierarchy for mobile agents
	Define Service interface to persistence.

	* BlackboardPersistence.java:
	Bug #1848 -- Need persistence of component hierarchy for mobile agents
	Factor persistence into blackboard-specific and generic parts.
	This is the blackboard specific part.

2003-02-10  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistenceMetricsServlet.java:
	Bug #1655 -- Add metrics for persistence size & frequency
	A servlet for viewing the persistence metrics of an agent. Shows a
	table of the retained persistence snapshots with sorting and
	average metrics for full, delta, and all snapshots.

	* PersistenceMetricsServiceImpl.java: 
	Bug #1655 -- Add metrics for persistence size & frequency
	Implement the service.

	* PersistenceMetricImpl.java: 
	Bug #1655 -- Add metrics for persistence size & frequency
	Implement the PersistenceMetricsService.Metric packet of
	information.

	* PersistenceControlPlugin.java: 
	Bug #1655 -- Add metrics for persistence size & frequency
	Remove registration of PersistenceControlService.

	* Persistence.java: 
	Bug #1655 -- Add metrics for persistence size & frequency
	Extend to define methods for registering and unregistering
	services supplied by Persistence.

	* PersistencePlugin.java: 
	Bug #1655 -- Add metrics for persistence size & frequency
	Persistence metrics include full identification of the plugin
	performing the snapshot. Extend this interface to define methods
	for retrieving parameters.

	* PersistencePluginAdapter.java: 
	Bug #1655 -- Add metrics for persistence size & frequency
	Persistence metrics include full identification of the plugin
	performing the snapshot so plugins need to retain this. This
	adapter base class retains and supplies the information when
	needed for creating a PersistenceMetricsService.Metric.

	* FilePersistenceBase.java: 
	* DummyPersistence.java: 
	* DatabasePersistence.java: 
	Bug #1655 -- Add metrics for persistence size & frequency
	Persistence metrics include full identification of the plugin
	performing the snapshot so plugins need to retain this. It was
	previously forgotten once initialization was completed.

	* BasePersistence.java: 
	Bug #1655 -- Add metrics for persistence size & frequency
	Instantiate PersistenceMetricsServiceImpl. (Un)register services
	when requested. Make existing statistics gathering unconditional
	(instead of only for info logging) and gather additional info.
	Create PersistenceMetricsService.Metric items after persisting and
	add to the PersistenceMetricsServiceImpl.

	* Exercise.java:
	A simple plugin that gives persistence work to do by publishing
	items that consume time and space when being serialized. For now,
	rewrite the code to change the time/space/frequency of operation.

2003-01-23  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistencePluginAdapter.java:
	Bug #2346 -- 2 Agents writing to the same robustness directory
	Add stub implementations of new API.

	* PersistencePlugin.java:
	Bug #2346 -- 2 Agents writing to the same robustness directory
	Add ownership methods. Add deleteOldPersistence argument.

	* PersistenceException.java:
	Add constructor accepting a message and an (caused by) exception.

	* FilePersistenceBase.java:
	Bug #2346 -- 2 Agents writing to the same robustness directory
	Implement the new ownership methods of the API. Assume ownership
	during init (lock mutex, write owner file, unlock mutex) and
	implement lock/unlock methods where lock only succeeds if the
	instance is the current owner.

	* FileMutex.java:
	Bug #2346 -- 2 Agents writing to the same robustness directory
	This class implement a simple mutual exclusion capability based on
	the file rename operation being atomic. That is, it assumes that
	if a file is renamed, the operation will only be successful if a
	file with the new name did not previously exist and that only one
	such rename can be successful regardless of the machine on which
	it is executed.

	* DummyPersistence.java: 
	Bug #2346 -- 2 Agents writing to the same robustness directory
	Implement API changes.

	* DatabasePersistence.java: 
	Bug #2346 -- 2 Agents writing to the same robustness directory
	Clear persistence in init method.

	* BufferedFilePersistence.java:
	Bug #2346 -- 2 Agents writing to the same robustness directory
	Clear persistence in init method.

	* BasePersistence.java:
	Bug #2346 -- 2 Agents writing to the same robustness directory
	Use ownership control methods of persistence plugins to
	synchronize access to persistence data (mutual exclusion) so that
	multiple agent instances can coordinate activity and avoid actions
	by agent instances no longer owning the persistence data (dead
	agents).
	Also, move old persistence clearing activity to plugin
	initialization instead of rehydration. Persistence clearing
	messes up the ownership logic.

2003-01-17  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Add toString() method so Persistence instances print something
	meaningful when included in log messages.
	Bug #2400 -- Make information on persist failures available in log
	Add error level log message with the exception.

	* FilePersistenceBase.java:
	Bug #2304 -- Persistence tries to write file "newSequence" to the CWD
	Fixed by including the persistenceDirectory in constructing Files.

2002-11-12  Todd Wright  <twright@bbn.com>

        * BasePersistence.java:
        * PersistenceInputStream.java:
        * PersistenceOutputStream.java:
        Moved planning-specific handling to new "ActivePersistenceObject"
        interface.  Altered PlanElement and MPTask to match.

2002-10-16  Todd Wright  <twright@bbn.com>

        * BasePersistence.java:
        * PersistenceOutputStream.java:
        Bug #2436 -- Replaced ByteArrayOutputStream with linked-list 
        buffers.  Also fixed the initial mobility state-capture buffer 
        size.

2002-08-27  Ray Tomlinson  <RTomlinson@bbn.com>

	* DatabasePersistence.java:
	* FilePersistenceBase.java:
	* DummyPersistence.java:
	* PersistencePlugin.java:
	Bug #2139 --  New 9.4.1.3 persistence problems with Robustness
	Change plugin API to avoid useless stream and reduce the
	likelihood of malformed object streams.

	* BasePersistence.java:
	Bug #2137 -- Need to catch security and IO exceptions from DataProtectionService
	Change e.printStackTrace into logger.error("msg", e);
	Bug #2139 -- New 9.4.1.3 persistence problems with Robustness
	Avoid NPE by checking for null uidServerState.
	Remove useless layer of stream wrapping to avoid malformed object
	streams when using data protection.
	Bug #2135 -- Persistence is calling DataProtectionService though
	it is not enabled in CSMART
	When using dummy persistence, never open any output streams, never
	use dataprotectionservice and don't even bother serializing the
	state unless the bytes are to be returned for mobility. Always
	update the identity table.

2002-07-25  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Bug #1864 -- NPE on Blackboard Subscriber closing transaction
	If a broken Composition/MPTask/Aggregation structure is persisted,
	it comes back with nulls in the composition list. Find and remove
	such nulls to prevent a subsequent NPE.

2002-07-24  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Various Persistence bugs.
	Squelch the info message about failing to find saved subscriber
	state for subscribers that do not expect to have saved state.

2002-07-23  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Change System.exit() to a warning and fixup.

2002-07-17  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistenceOutputStream.java: 
	* PersistenceInputStream.java:
	Bug # 1640 -- Exception when trying to rehydrate
	References to PlanElements that have not been (or are no longer)
	published should not be persisted. The code to do this erroneously
	accounted for the omitted objecs (by counting them as existing).
	However, omitting the object from the persistence snapshot will
	result in null references after rehydration. In the case of the
	tasks of workflows and the aggregations of compositions, these
	null will usually lead to NPE. The presence of such objects is
	indicates a problem at the application level so the debug message
	has been rephrased as an ERROR message.

2002-07-16  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Fix bad ContextTable change in rehydrate().

	* PersistenceOutputStream.java: 
	* PersistenceInputStream.java: 
	Restore debug code that got lost during LoggingService conversion.

2002-07-09  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Bug #1616 --
	Change warning about missing security services to INFO level.

2002-06-26  Ray Tomlinson  <RTomlinson@bbn.com>

	* BufferedFilePersistence.java:
	Enh #1547 -- Persists take long time, blocking agent progress
	Persistence plugin that soaks up persistence output into ram
	buffers and spools out the data to a (presumably slow) file
	system. This allows the writing of a persistence snapshot to
	complete more quickly and let the actual data writes proceed in
	the background.

	* BufferedFileSystem.java:
	Enh #1547 -- Persists take long time, blocking agent progress
	New file provides support for BufferedFilePersistence plugin.
	Opens buffered file output streams using a separate thread to
	spool the data to the file long after the stream has been written
	and closed. Uses up to 10 MBytes of buffering. Provides hooks for
	synchronizing renames and reads with the buffered output.

	* FilePersistence.java:
	* FilePersistenceBase.java:
	Enh #1547 -- Persists take long time, blocking agent progress
	Factored out the code common to all file-based persistence plugins
	into FilePersistenceBase.java leaving just abstract method
	implementations in FilePersistence.

	* BasePersistence.java:
	Enh #1547 -- Persists take long time, blocking agent progress
	Use StringUtility.parseCSV() to parse plugin parameters. This
	allows for quoting the separator character which is necessary for
	specifying a drive letter in a directory name.

2002-06-24  Ray Tomlinson  <RTomlinson@bbn.com>

	* DataProtectionServiceStub.java: 
	* DataProtectionOutputStreamStub.java: 
	* DataProtectionKeyStub.java: 
	* DataProtectionInputStreamStub.java:
	Stub implementation for testing.

	* BasePersistence.java:
	Bug #1533 -- Identification of malfunctioning agent is hard
	Use new LoggingServiceWithPrefix.

2002-06-21  Ray Tomlinson  <RTomlinson@bbn.com>

	* NonPersistable.java
	Bug #1551 -- NonPersistable not used
	Removed. Use NotPersistable
	
	* FilePersistence.java:
	Bug #1551 Directory creation race
	Unconditionally call mkdirs to create the path to the persistence
	root directory. Then verify that it exists and throw an exception
	if it does not. The cost of calling mkdirs when it's not needed is
	miniscule.

	* BasePersistence.java:
	Bug #1536 -- NotPersistable object are persisted
	Revise copyAndRemoveNotPersistable to actually remove
	EnvelopeTuples for not persistable objects. Copies of Envelopes
	having such tuples are created without the not persistable
	objects. Use copyAndRemoveNotPersistable to filter not persistable
	objects out of pendingEnvelopes and transactionEnvelopes of
	PersistenceSubscriberState.
	
	* BasePersistence.java:
	Bug #1539 -- Publishable.isPersistable is ignored
	The isPersistable test now covers both NotPersistable objects and
	Publishable objects for which the isPersistable method return
	false.

	* NotPersistable.java:
	Bug #1537
	Fix javadoc to more accurately describe this marker interface.

2002-06-18  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Bug #1511
	Rehydration sets are reversed preferring oldest over newest.
	Reversed to the sign of the comparisons to fix.
	

2002-06-14  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistencePlugin.java:
	Add methods to support DataProtectionService.
	storeDataProtectionKey stores the encrypted key and
	retrieveDataProtectionKey retrieves it.

	* FilePersistence.java: 
	Implement additional methods to support DataProtectionService.
	The keys are stored in files named key_<delta number>.
	
	* DummyPersistence.java:
	Implement additional methods to support DataProtectionService.

	* DatabasePersistence.java:
	Define methods for using DataProtectionService, but implementation
	just throws an exception -- that is, DataProtectionService cannot
	presently be used with a Database persistence medium.

	* BasePersistence.java:
	Add DataProtectionService. Implement DataProtectionServiceClient.
	Use DataProtection Service to wrap input and output streams.

2002-05-09  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Re-interpret "disabled persistence" as install only the dummy
	persistence plugin and run persistence at a minimal rate. This
	leaves the persistence mechanism available for getting agent state
	for agent mobility.

2002-05-07  Ray Tomlinson  <RTomlinson@bbn.com>

	* FilePersistence.java:
	Default persistenct root directory to <org.cougaar.workspace>/P
	Default <org.cougaar.workspace> to <org.cougaar.install.path>/workspace

2002-04-29  Ray Tomlinson  <RTomlinson@bbn.com>

	* FilePersistence.java:
	Add documentation of initialization parameters.

	* BasePersistence.java:
	Fix documentation of org.cougaar.core.persistence.class to
	correspond to use for multiple plugins.

2002-04-26  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Insure that the currentPersistPluginInfo is never null while
	persisting.

2002-04-23  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Move the "finally" clause from rehydrateFromStream to the caller
	(rehydrateOneDelta) where access to the correct persistence plugin
	is possible.

2002-04-19  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistenceControlPlugin.java:
	Plugin to control persistence. Interrogates the persistence
	service for all controls and creates OperatingModes for those
	controls. Then monitors the OperatingModes and adjusts the
	controls accordingly.

	* PersistencePluginAdapter.java:
	Adapter for PersistencePlugin implementations defining default
	implementations of several methods that seldom need to be tailored
	by the plugin. This methods include the new methods for specifying
	media-specific controls.

	* PersistencePlugin.java:
	Add methods for media-specific controls (OperatingModes)

	* FilePersistence.java: 
	* DummyPersistence.java: 
	* DatabasePersistence.java:
	Used PersistencePluginAdapter for common functions.

2002-04-10  Ray Tomlinson  <RTomlinson@bbn.com>

	* SequenceNumbers.java: 
	* PersistencePlugin.java: 
	* PersistenceOutputStream.java: 
	* Persistence.java: 
	* FilePersistence.java: 
	* DummyPersistence.java: 
	* DatabasePersistence.java: 
	* BasePersistence.java:
	Changes to support persistence adaptivity.

2002-03-11  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistencePlugin.java:
	Add class javadoc.

2002-03-08  Ray Tomlinson  <RTomlinson@bbn.com>

	* SequenceNumbers.java:
	* PersistencePluginSupport.java:
	* PersistencePlugin.java: 
	* FilePersistence.java:
	* DummyPersistence.java: 
	* DatabasePersistence.java:
	* BasePersistence.java:
	Obtain media-specific services using PersistencePlugin
	implementations instead of sub-classing BasePersistence. Basic
	operation has not changed only refactored.
	Convert to using LoggingService instead of writing history and
	other files.

2002-01-24  Ray Tomlinson  <RTomlinson@bbn.com>

	* DatabasePersistence.java:
	Fix bug 1014
	The query to update the status of incremental deltas in the
	database was being overwritten with the query to update the status
	of full deltas so incremental deltas remained active forever and
	were never scavenged. Also the argument specifying if a delta were
	full or not was misspelled and so no delta was ever marked as
	"full". Consequently, all deltas were incremental and never
	scavenged.
	There was no provision to scavenge full deltas when archiving is
	disabled. This now fixed so the persistence database can be kept
	as trim as possible.

	* BasePersistence.java:
	Fix bug 1014
	Document clear property
	Add org.cougaar.core.cluster.persistence.archivingDisabled
	property to allow archiving to be disabled.
	Add org.cougaar.core.cluster.persistence.consolidationPeriod
	property to control how ofter full deltas are generated. Defaults
	to 10 which it is the prior hard-coded value

2001-11-16  Ray Tomlinson  <RTomlinson@bbn.com>

	* Persistence.java: 
	* FilePersistence.java: 
	* DummyPersistence.java:
	Add getDatabaseConnection and releaseDatabaseConnection to
	Persistence interface for use by Delta. This avoids casting the
	Persistence interface into a DatabasePersistence in order to
	access these methods. The methods throw
	UnsupportedOperationException in the non-database implementations
	of this interface.

2001-09-27  Ray Tomlinson  <RTomlinson@bbn.com>

	* PersistenceException.java (Repository):
	Add a little javadoc.

2001-08-31  Ray Tomlinson  <RTomlinson@bbn.com>

	* Persistence.java: 
	* FilePersistence.java: 
	* DummyPersistence.java: 
	* DatabasePersistence.java: 
	* BasePersistence.java:
	Add suffix argument to disableWrite and readSequenceNumbers
	methods to allow arbitrary archive to be specified from the
	command line. In the case of DatabasePersistence, the suffix is
	parsed into its numeric value and used to query for the correct
	archive delta.

2001-08-30  Ray Tomlinson  <RTomlinson@bbn.com>

	* Persistence.java: 
	* FilePersistence.java: 
	* DummyPersistence.java: 
	* DatabasePersistence.java: 
	* BasePersistence.java:
	Change interface to permit full versus incremental persistence.
	Retain full persistence deltas for archiving. Also make an extra
	copy of the sequence file for each full delta. This facilitates
	returning to archived data.

2001-08-24  Ray Tomlinson  <RTomlinson@bbn.com>

	* BasePersistence.java:
	Remove clusters List, it's not needed and it holds onto old
	clusters after they have been moved elsewhere.

2001-08-13  Ray Tomlinson  <rtomlinson@bbn.com>

	* RehydrationResult.java:
	Used to pass back the MessageManager after rehydration in addition
	to the old return result. The MessageManager is not managed by the
	persistence module any more. See BasePersistence.

	* PersistenceOutputStream.java:
	Add accessor to get the bytes of the output stream. Used to
	provide the object needed to implement getState().

	* PersistenceObject.java:
	A wrapper around a byte array of serialized persistence
	information. Used to implement the component getState methods.

	* PersistenceNotEnabledException.java:
	An exception to throw when an operation requires persistence to
	be enabled and it isn't.	

	* Persistence.java:
	Change interface to pass additional information in and out when
	performing persistence. See BasePersistence for details.

	* BasePersistence.java:
	Move management of MessageManager out of this class. It is now
	only a special object needing persistence (if present at all). Add
	rehydration from a PersistenceObject object containing a byte
	array of serialized persistence info. Intended for use with
	dynamic agents to rehydrate an agent at a new location. Also, on
	the other side, return said PersistenceObject when creating a
	persistence delta, if requested.

1999-07-13  Ray Tomlinson  <rtomlinson@bbn.com>

	* ChangeLog -- created

	* Persistence.java Persistence interface.

	* FilePersistence.java Implementation of Persistence using files.

	* IdentityTable.java Augmented Hashtable to maintain
	correspondence between persisted objects and indentifying
	integers.

	* NonPersistable.java Marker interface for objects that should not
	be persisted.

	* NotPersistableException.java Exception thrown by attempts to
	persist objects that can't be persisted.

	* PersistenceAssociation.java Associates a reference int and a
	persistable object.

	* PersistenceInputStream.java ObjectInputStream subclass to
	implement persistence.

	* PersistenceOutputStream.java ObjectOutputStream subclass to
	implement persistence.
	
	* PersistenceReference.java Replacement for previously persisted
	objects.

	* PersistenceSubscriberState.java Named container for the inbox	of
	a Subscriber.
