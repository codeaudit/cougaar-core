Using Naming Service Listeners

The naming service now supports JNDI listeners (callbacks). Listeners
are invoked when certain changes occur to objects stored in the naming
service. It does not matter from which agent these changes originate,
any listener in any agent that has been registered for that target
will be invoked. Naming service listeners are expensive and should be
used sparingly and judiciously.

The instance returned by NamingService.getRootContext() is now a
NamingEventContext (it was previously NamingDirContext). This class
implements both the javax.naming.event.EventContext and
javax.naming.event.EventDirContext interfaces. The user is refered to
the javadoc of these interfaces for details. Below, the basics of using
listeners are described.

The two additional interfaces provide a number of methods for adding
naming listeners to any naming context. The methods differ in how the
targets in the naming service are specified. It is important to point
out that listeners are attached only to targets that already exist in
the naming service at the time that the listener is added. This is
signified by the targetMustExist method returning true. Changesg to
targets that are bound (or subcontexts that are created) after a
listener is added will not be reported. Targets that are unbound and
then bound anew will not have any listeners. Targets that are rebound
(using rebind) will retain their listeners (and report an
objectChanged event).

The JNDI documentation is mute about the effect of changing attributes
on listener events. It neither says that such changes caused naming
events not does it say that they don't cause naming events. This
implementation _does_ generate OBJECT_CHANGED naming events.

There are two kind of listeners: NamespaceChangeListener and
ObjectChangeListener. Listeners implementing the former are attached
to contexts and report and additions, removals, or renames within the
context. Listeners implementing the latter are attached to all other
objects. Listeners may implement both interfaces and will be invoked
for either kind of change.

Listeners are registered with a particular context instance.
Therefore, applications must keep a reference to that instance so that
listeners can be unregistered. The context instance with which a
listener is registered need not be the same as the context containing
the targets of the listener
