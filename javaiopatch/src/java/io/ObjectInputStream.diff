*** ObjectInputStream.orig	Mon Mar 26 11:40:43 2001
--- ObjectInputStream.java	Mon Mar 26 11:43:04 2001
***************
*** 1199,1205 ****
  	if (currentClassDesc.isExternalizable()) {
  	    try {
  		currentObject = (currentClass == null) ?
! 		              null : allocateNewObject(currentClass, currentClass);
  		handle = assignWireOffset(currentObject);
  		boolean prevmode = blockDataMode;
  		try {
--- 1199,1205 ----
  	if (currentClassDesc.isExternalizable()) {
  	    try {
  		currentObject = (currentClass == null) ?
! 		              null : allocateNewObjectOverride(currentClass, currentClass);
  		handle = assignWireOffset(currentObject);
  		boolean prevmode = blockDataMode;
  		try {
***************
*** 1345,1351 ****
  	     */
  	    try {
  		currentObject = (currentClass == null) ?
! 			     null : allocateNewObject(currentClass, currclass);
  	    } catch (NoSuchMethodError e) {
  		throw new InvalidClassException(currclass.getName() +
  			"Missing no-arg constructor for class"); 
--- 1345,1351 ----
  	     */
  	    try {
  		currentObject = (currentClass == null) ?
! 			     null : allocateNewObjectOverride(currentClass, currclass);
  	    } catch (NoSuchMethodError e) {
  		throw new InvalidClassException(currclass.getName() +
  			"Missing no-arg constructor for class"); 
***************
*** 2092,2098 ****
       * see DataInputStream for the details and alternatives.
       */
      public String readLine() throws IOException {
! 	return dis.readLine();
      }
  
      /**
--- 2092,2101 ----
       * see DataInputStream for the details and alternatives.
       */
      public String readLine() throws IOException {
!       // MIK - Hack to prevent deprecation warnings
!       //  return dis.readLine();
!       BufferedReader d = new BufferedReader(new InputStreamReader(dis));
!       return d.readLine();
      }
  
      /**
***************
*** 2827,2836 ****
      private IOException abortIOException = null;
      private ClassNotFoundException abortClassNotFoundException = null;
  
      /* Allocate a new object for the specified class
       * Native since newInstance may not be able to find a zero arg constructor.
       */
!     private static native Object allocateNewObject(Class aclass, Class initclass)
  	throws InstantiationException, IllegalAccessException;
      
      /* Allocate a new array for the specified class
--- 2830,2844 ----
      private IOException abortIOException = null;
      private ClassNotFoundException abortClassNotFoundException = null;
  
+     protected Object allocateNewObjectOverride(Class cl, Class scl)
+       throws InstantiationException, IllegalAccessException {
+       return allocateNewObject(cl, scl);
+     }
+ 
      /* Allocate a new object for the specified class
       * Native since newInstance may not be able to find a zero arg constructor.
       */
!     public static native Object allocateNewObject(Class aclass, Class initclass)
  	throws InstantiationException, IllegalAccessException;
      
      /* Allocate a new array for the specified class
